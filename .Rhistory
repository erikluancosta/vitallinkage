library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex
library(janitor)
library(lubridate)
library(writexl)
library(vitaltable)
devtools::load_all(".")
options(scipen = 999)
# Carregando a base
load('C:/vitalstrategies/data_sicence/TCC/script_linkage/dados/base_concatenada_rn.RData')
# Ajustando e criando um sample
concat <-
concat |> vitallinkage::ajuste_data(2)
concat$nu_cns <- as.integer(concat$nu_cns)
concat$cd_autorizador_doc <- as.integer(concat$cd_autorizador_doc)
concat_2 <- subset(concat, grepl("^A", ds_nome_pac, ignore.case = TRUE))
# 1º condição
df <- concat_2 |>
arrange(ds_nome_pac, dt_nasc) |>
group_by(ds_nome_pac, dt_nasc) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_pac) &
((ds_nome_pac == lag(ds_nome_pac)) | (ds_nome_pac == lead(ds_nome_pac))), n(), NA))  |>
mutate(regra1 = ifelse(!is.na(N_par) & N_par > 1, 1, NA)) |>
mutate(par_1 = cur_group_id() * (N_par > 1)) |>
ungroup() |>
select(-N_par) |>
mutate(par_c1 = par_1) |>
arrange(par_1, banco)
max_par_1 <- max(df$par_1, na.rm = TRUE)
# 2º condição
df <- df |>
arrange(dt_nasc, ds_nome_mae_sound) |>
group_by(dt_nasc, ds_nome_mae_sound) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_mae_sound) &
((ds_nome_mae_sound == lag(ds_nome_mae_sound)) | (ds_nome_mae_sound == lead(ds_nome_mae_sound))),
n(), NA))  |>
mutate(regra2 = ifelse(!is.na(N_par) & N_par > 1, 1, NA),
par_2 = ifelse(!is.na(N_par) & N_par > 1, cur_group_id() + max_par_1, NA)) |>
ungroup()
# Encontrar valores que são iguais em ambas as colunas
valores_iguais <- intersect(unique(h$par_temp), unique(h$par_2))
# Encontrar valores que são iguais em ambas as colunas
valores_iguais <- intersect(unique(df$par_temp), unique(df$par_2))
unique(df$par_temp)
# Encontrar valores que são iguais em ambas as colunas
valores_iguais <- intersect(unique(df$par_1), unique(df$par_2))
unique(df$par_1)
unique(df$par_2)
intersect(unique(df$par_1), unique(df$par_2))
# meio de campo
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1) ) |>
rename('par_temp' = par_1)
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410')) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
View(c)
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410') | par_2 %in% c(48133)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
h <- df |>select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
v <- h |> filter(is.na(regra2) & regra1 == 1)
View(v)
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410') | par_2 %in% c(48133)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410') | par_2 %in% c(48133, 18801)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
View(v)
View(c)
# meio de campo
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1) ) |>
rename('par_temp' = par_1)
h <- df |>select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410') | par_2 %in% c(48133, 18801)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(c, par_list, by = "par_2", type = "inner") |>
mutate(par_final = coalesce(par_temp, par_2))
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_temp, par_2))
View(par_list)
# Encontrar valores que são iguais em ambas as colunas
valores_iguais <- intersect(unique(par_list$par_temp), unique(par_list$par_2))
valores_iguais
par_list$par_temp
unique(par_list$par_temp)
unique(par_list$par_2)
intersect(unique(par_list$par_temp), unique(par_list$par_2))
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_temp, par_2))
par_list$par_2[duplicated(par_list$par_2)]
duplicated_values <- par_list$par_2[duplicated(par_list$par_2)]
duplicated_values
duplicated_values <- !is.na(par_list$par_2[duplicated(par_list$par_2)])
duplicated_values
duplicated_values <- par_list$par_2[duplicated(par_list$par_2)] |> filter(!is.na())
par_list$par_2[duplicated(par_list$par_2)]
par_list$par_2[duplicated(na.omit(par_list$par_2))]
par_list |> filter(par_2 == 43708 )
l <-par_list |> filter(par_2 == 43708 )
View(l)
l <-df |> filter(par_2 == 43708 )
View(l)
l <-df |> filter(par_2 == 43708 ) |> select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
View(l)
l <-df |> filter(par_1 == 35030 ) |> select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
View(l)
l <-df |> filter(par_2 == 44515) |> select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
View(l)
l <-par_list |> filter(par_2 == 44515) |> select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
l <-par_list |> filter(par_2 == 44515) |> select(par_temp, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
l <-par_list |> filter(par_2 == 44515) |> select(par_temp, par_2)
View(l)
l <-par_list |> filter(par_2 == 44515 | par_temp == 79820) |> select(par_temp, par_2)
View(l)
l <-par_list |> filter(par_2 %in% c(44515, 79820) | par_temp == 79820) |> select(par_temp, par_2)
View(l)
l <-par_list |> filter(par_2 %in% c(44515, 79820) | par_temp %in% c(79820, 44515)) |> select(par_temp, par_2)
View(l)
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410')) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_temp, par_2))
View(g)
# meio de campo
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1)) |>
rename('par_temp' = par_1)
# meio de campo
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1)
nova_linha <- data.frame(matrix(NA, ncol = ncol(par_list), nrow = 1))
# Atribuir nomes de coluna à nova linha, se necessário
colnames(nova_linha) <- colnames(par_list)
# Adicionar a nova linha ao final do dataframe existente
par_list <- rbind(par_list, nova_linha)
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_temp, par_2))
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410') | par_2 %in% c(48133, 18801)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_temp, par_2))
View(g)
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
# meio de campo
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1)
nova_linha <- data.frame(matrix(NA, ncol = ncol(par_list), nrow = 1))
# Atribuir nomes de coluna à nova linha, se necessário
colnames(nova_linha) <- colnames(par_list)
# Adicionar a nova linha ao final do dataframe existente
par_list <- rbind(par_list, nova_linha)
g <- left_join(df, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410') | par_2 %in% c(48133, 18801)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1) |>
bind_rows(data.frame(par_1 = NA, par_2 = NA))
View(par_list)
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1) |>
bind_rows(data.frame(par_1 = NA, par_2 = NA))
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1) |>
bind_rows(data.frame(par_temp = NA, par_2 = NA))
View(par_list)
View(par_list)
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1) |>
bind_rows(data.frame(par_temp = NA, par_2 = NA))
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410') | par_2 %in% c(48133, 18801)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
h <- df |>select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(h, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
# Identify rows with duplicate values in par_2 in the left data frame (c)
linhas_problematicas_x <- df %>%
semi_join(par_list, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_temp))
# Identify rows with duplicate values in par_2 in the left data frame (c)
linhas_problematicas_x <- c %>%
semi_join(par_list, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_temp))
# Identificar as linhas problemáticas no dataframe y (par_list)
linhas_problematicas_y <- par_list %>%
semi_join(c, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_temp))
linhas_problematicas_y
# Identify rows with duplicate values in par_2 in the left data frame (c)
linhas_problematicas_x <- df %>%
semi_join(par_list, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_temp))
# Identify rows with duplicate values in par_2 in the left data frame (c)
linhas_problematicas_x <- df %>%
semi_join(par_list, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_1))
linhas_problematicas_x
# Identificar as linhas problemáticas no dataframe y (par_list)
linhas_problematicas_y <- par_list %>%
semi_join(c, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_temp))
linhas_problematicas_y
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1) |>
bind_rows(data.frame(par_temp = NA, par_2 = NA))
h <- df |>select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
View(g)
g <- left_join(h, par_list, by = "par_2")
g <- left_join(df, par_list, by = "par_2")
# Identificar as linhas problemáticas no dataframe df
linhas_problematicas_df <- df %>%
semi_join(par_list, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_temp))
# Identificar as linhas problemáticas no dataframe df
linhas_problematicas_df <- df %>%
semi_join(par_list, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_1))
# Identificar as linhas problemáticas no dataframe par_list
linhas_problematicas_par_list <- par_list %>%
semi_join(df, by = "par_2") %>%
filter(duplicated(par_2) | duplicated(par_temp))
linhas_problematicas_df
linhas_problematicas_par_list
par_list |> filter(42715)
par_list |> filter(par_242715)
par_list |> filter(par_2 == 242715)
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1)
nova_linha <- data.frame(matrix(NA, ncol = ncol(par_list), nrow = 1))
# Atribuir nomes de coluna à nova linha, se necessário
colnames(nova_linha) <- colnames(par_list)
# Adicionar a nova linha ao final do dataframe existente
par_list <- rbind(par_list, nova_linha)
g <- left_join(df, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
g <- left_join(df, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
gc()
# Carregando a base
load('C:/vitalstrategies/data_sicence/TCC/script_linkage/dados/base_concatenada_rn.RData')
# Ajustando e criando um sample
concat <-
concat |> vitallinkage::ajuste_data(2)
concat$nu_cns <- as.integer(concat$nu_cns)
concat$cd_autorizador_doc <- as.integer(concat$cd_autorizador_doc)
concat_2 <- subset(concat, grepl("^A", ds_nome_pac, ignore.case = TRUE))
# 1º condição
df <- concat_2 |>
arrange(ds_nome_pac, dt_nasc) |>
group_by(ds_nome_pac, dt_nasc) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_pac) &
((ds_nome_pac == lag(ds_nome_pac)) | (ds_nome_pac == lead(ds_nome_pac))), n(), NA))  |>
mutate(regra1 = ifelse(!is.na(N_par) & N_par > 1, 1, NA)) |>
mutate(par_1 = cur_group_id() * (N_par > 1)) |>
ungroup() |>
select(-N_par) |>
mutate(par_c1 = par_1) |>
arrange(par_1, banco)
# 1º condição
df <- concat_2 |>
arrange(ds_nome_pac, dt_nasc) |>
group_by(ds_nome_pac, dt_nasc) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_pac) &
((ds_nome_pac == lag(ds_nome_pac)) | (ds_nome_pac == lead(ds_nome_pac))), n(), NA))  |>
mutate(regra1 = ifelse(!is.na(N_par) & N_par > 1, 1, NA)) |>
mutate(par_1 = cur_group_id() * (N_par > 1)) |>
ungroup() |>
select(-N_par) |>
mutate(par_c1 = par_1) |>
arrange(par_1, banco)
library(readstata13)
library(tidyverse)
library(pdftools)
library(data.table)
library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex
library(janitor)
library(lubridate)
library(writexl)
library(vitaltable)
devtools::load_all(".")
options(scipen = 999)
# 1º condição
df <- concat_2 |>
arrange(ds_nome_pac, dt_nasc) |>
group_by(ds_nome_pac, dt_nasc) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_pac) &
((ds_nome_pac == lag(ds_nome_pac)) | (ds_nome_pac == lead(ds_nome_pac))), n(), NA))  |>
mutate(regra1 = ifelse(!is.na(N_par) & N_par > 1, 1, NA)) |>
mutate(par_1 = cur_group_id() * (N_par > 1)) |>
ungroup() |>
select(-N_par) |>
mutate(par_c1 = par_1) |>
arrange(par_1, banco)
max_par_1 <- max(df$par_1, na.rm = TRUE)
# 2º condição
df <- df |>
arrange(dt_nasc, ds_nome_mae_sound) |>
group_by(dt_nasc, ds_nome_mae_sound) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_mae_sound) &
((ds_nome_mae_sound == lag(ds_nome_mae_sound)) | (ds_nome_mae_sound == lead(ds_nome_mae_sound))),
n(), NA))  |>
mutate(regra2 = ifelse(!is.na(N_par) & N_par > 1, 1, NA),
par_2 = ifelse(!is.na(N_par) & N_par > 1, cur_group_id() + max_par_1, NA)) |>
ungroup()
gc()
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1)
nova_linha <- data.frame(matrix(NA, ncol = ncol(par_list), nrow = 1))
# Atribuir nomes de coluna à nova linha, se necessário
colnames(nova_linha) <- colnames(par_list)
# Adicionar a nova linha ao final do dataframe existente
par_list <- rbind(par_list, nova_linha)
View(par_list)
h <- df |>select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410') | par_2 %in% c(48133, 18801)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(df, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
c
View(c)
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
View(g)
g <- left_join(c, par_list, by = "par_2", relationship = "many-to-many") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
View(g)
g <- left_join(df, par_list, by = "par_2", relationship = "many-to-many") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
View(g)
h <- g |>select(par_1, par_2, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
View(h)
h <- g |>select(par_1, par_2,par_temp, par_final, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
View(h)
View(h)
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410', 'A342B260S410') | par_2 %in% c(48133, 18801)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(c, par_list, by = "par_2", relationship = "many-to-many") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
View(g)
h <- df |>select(par_1, par_2,par_temp, par_final, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2) |> filter(par_1%in%c(869, 949))
h <- df |> select(par_1, par_2,ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2) |> filter(par_1%in%c(869, 949))
View(h)
# 1º condição
df <- concat_2 |>
arrange(ds_nome_pac, dt_nasc) |>
group_by(ds_nome_pac, dt_nasc) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_pac) &
((ds_nome_pac_sound == lag(ds_nome_pac_sound)) | (ds_nome_pac_sound == lead(ds_nome_pac_sound))), n(), NA))  |>
mutate(regra1 = ifelse(!is.na(N_par) & N_par > 1, 1, NA)) |>
mutate(par_1 = cur_group_id() * (N_par > 1)) |>
ungroup() |>
select(-N_par) |>
mutate(par_c1 = par_1) |>
arrange(par_1, banco)
# 2º condição
df <- df |>
arrange(dt_nasc, ds_nome_mae_sound) |>
group_by(dt_nasc, ds_nome_mae_sound) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_mae_sound) &
((ds_nome_mae_sound == lag(ds_nome_pac_sound)) | (ds_nome_pac_sound == lead(ds_nome_pac_sound))),
n(), NA))  |>
mutate(regra2 = ifelse(!is.na(N_par) & N_par > 1, 1, NA),
par_2 = ifelse(!is.na(N_par) & N_par > 1, cur_group_id() + max_par_1, NA)) |>
ungroup()
sum(df$regra1)
df$regra1
df |> filter(regra1==1) |> nrow()
# 1º condição
df <- concat_2 |>
arrange(ds_nome_pac, dt_nasc) |>
group_by(ds_nome_pac, dt_nasc) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_pac) &
((ds_nome_pac_sound == lag(ds_nome_pac_sound)) | (ds_nome_pac_sound == lead(ds_nome_pac_sound))), n(), NA))  |>
mutate(regra1 = ifelse(!is.na(N_par) & N_par > 1, 1, NA)) |>
mutate(par_1 = cur_group_id() * (N_par > 1)) |>
ungroup() |>
select(-N_par) |>
mutate(par_c1 = par_1) |>
arrange(par_1, banco)
max_par_1 <- max(df$par_1, na.rm = TRUE)
# 2º condição
df <- df |>
arrange(dt_nasc, ds_nome_mae_sound) |>
group_by(dt_nasc, ds_nome_mae_sound) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_mae_sound) &
((ds_nome_mae_sound == lag(ds_nome_pac_sound)) | (ds_nome_pac_sound == lead(ds_nome_pac_sound))),
n(), NA))  |>
mutate(regra2 = ifelse(!is.na(N_par) & N_par > 1, 1, NA),
par_2 = ifelse(!is.na(N_par) & N_par > 1, cur_group_id() + max_par_1, NA)) |>
ungroup()
df |> filter(regra2 == 1 ) |>  nrow()
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1)
nova_linha <- data.frame(matrix(NA, ncol = ncol(par_list), nrow = 1))
# Atribuir nomes de coluna à nova linha, se necessário
colnames(nova_linha) <- colnames(par_list)
# Adicionar a nova linha ao final do dataframe existente
par_list <- rbind(par_list, nova_linha)
h <- df |> select(par_1, par_2,ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2) |> filter(par_1%in%c(869, 949))
c <- df |> filter(ds_nome_pac_sound %in% c('A342B465S410', 'A254F655L220', 'A655F253S412', 'A535C250S410', 'A535R362S410', 'A342B260S410') | par_2 %in% c(48133, 18801)) |> select(par_1, par_2, ds_nome_pac,ds_nome_pac_sound, dt_nasc, banco,regra1, regra2)
g <- left_join(c, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
View(g)
g <- left_join(df, par_list, by = "par_2") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
# 1º condição
df <- concat_2 |>
arrange(ds_nome_pac, dt_nasc) |>
group_by(ds_nome_pac, dt_nasc) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_pac) &
((ds_nome_pac == lag(ds_nome_pac)) | (ds_nome_pac == lead(ds_nome_pac))), n(), NA))  |>
mutate(regra1 = ifelse(!is.na(N_par) & N_par > 1, 1, NA)) |>
mutate(par_1 = cur_group_id() * (N_par > 1)) |>
ungroup() |>
select(-N_par) |>
mutate(par_c1 = par_1) |>
arrange(par_1, banco)
max_par_1 <- max(df$par_1, na.rm = TRUE)
# 2º condição
df <- df |>
arrange(dt_nasc, ds_nome_mae_sound) |>
group_by(dt_nasc, ds_nome_mae_sound) |>
mutate(N_par = ifelse(!is.na(dt_nasc) & !is.na(ds_nome_mae_sound) &
((ds_nome_mae_sound == lag(ds_nome_mae_sound)) | (ds_nome_mae_sound == lead(ds_nome_mae_sound))),
n(), NA))  |>
mutate(regra2 = ifelse(!is.na(N_par) & N_par > 1, 1, NA),
par_2 = ifelse(!is.na(N_par) & N_par > 1, cur_group_id() + max_par_1, NA)) |>
ungroup()
gc()
################
# MEIO DE CAMPO
################
par_list <- df |>
distinct(par_1, par_2) |>
filter(!is.na(par_1), !is.na(par_2)) |>
rename('par_temp' = par_1)
nova_linha <- data.frame(matrix(NA, ncol = ncol(par_list), nrow = 1))
# Atribuir nomes de coluna à nova linha, se necessário
colnames(nova_linha) <- colnames(par_list)
# Adicionar a nova linha ao final do dataframe existente
par_list <- rbind(par_list, nova_linha)
h <- df |>select(par_1, par_2,par_temp, par_final, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2) |> filter(par_1%in%c(869,949))
g <- left_join(df, par_list, by = "par_2", relationship = "many-to-many") |>
mutate(par_final = coalesce(par_1, par_temp, par_2))
h <- g |>select(par_1, par_2,par_temp, par_final, ds_nome_pac, ds_nome_pac_sound, dt_nasc, banco,regra1, regra2) |> filter(par_1%in%c(869,949))
View(h)
h <- g |>select(par_1, par_2,par_temp, par_final, ds_nome_pac, ds_nome_pac_sound, ds_nome_mae, dt_nasc, banco,regra1, regra2) |> filter(par_1%in%c(869,949))
g <- left_join(df, par_list, by = "par_2", relationship = "many-to-many") |>
mutate(par_final = coalesce(par_temp, par_1, par_2))
h <- g |>select(par_1, par_2,par_temp, par_final, ds_nome_pac, ds_nome_pac_sound, ds_nome_mae, dt_nasc, banco,regra1, regra2) |> filter(par_1%in%c(869,949))
library(readstata13)
library(tidyverse)
library(pdftools)
library(data.table)
library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex
library(janitor)
library(lubridate)
library(writexl)
library(vitaltable)
devtools::load_all(".")
options(scipen = 999)
