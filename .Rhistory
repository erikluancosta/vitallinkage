sinan <- sinan |>
vitallinkage::criar_coluna_id("SINAN") |> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::drop_duplicados_sinan_1() #Dropa as colunas duplicadas inicialmente
sinan2<- sinan |> padroniza_variaveis("SINAN")
sinan2<- sinan |> padroniza_variaveis("SINAN")
View(sinan)
sinan2<- padroniza_variaveis(sinan,"SINAN")
sinan2<- padroniza_variaveis(sinan,"SINAN")
padroniza_variaveis <- function(df, nome_base){
# carregamento da base com os nomes das colunas
namestand <- vitallinkage::namestand
# nomes das variáveis originais e padronizadas filtradas para o df
df_names <- namestand %>%
dplyr::filter(fonte == nome_base) %>%
dplyr::select(var_names_orig, stanard_name)
df <- df %>%
select(df_names$var_names_orig)
return(names(df) <- df_names$stanard_name)
}
sinan2<- padroniza_variaveis(sinan,"SINAN")
View(sinan)
padroniza_variaveis <- function(sinan, nome_base){
# carregamento da base com os nomes das colunas
namestand <- vitallinkage::namestand
# nomes das variáveis originais e padronizadas filtradas para o SINAN
sinan_names <- namestand %>%
dplyr::filter(fonte == "SINAN") %>%
dplyr::select(var_names_orig, stanard_name)
sinan <- sinan %>%
select(sinan_names$var_names_orig)
names(sinan) <- sinan_names$stanard_name
}
padroniza_variaveis(sinan,"SINAN")
sinan2<- padroniza_variaveis(sinan,"SINAN")
View(namestand)
namestand %>%
dplyr::filter(fonte == "SINAN") %>%
dplyr::select(var_names_orig, stanard_name)
# nomes das variáveis originais e padronizadas filtradas para o SINAN
sinan_names <- namestand %>%
dplyr::filter(fonte == "SINAN") %>%
dplyr::select(var_names_orig, stanard_name)
sinan %>%
select(sinan_names$var_names_orig)
sinan <- sinan %>%
select(sinan_names$var_names_orig)
names(sinan) <- sinan_names$stanard_name
View(sinan)
padroniza_variaveis <- function(df, nome_base){
# nomes das variáveis originais e padronizadas filtradas para o SINAN
sinan_names <- namestand %>%
dplyr::filter(fonte == nome_base) %>%
dplyr::select(var_names_orig, stanard_name)
df <- df %>%
select(sinan_names$var_names_orig)
names(df) <- sinan_names$stanard_name
}
sinan <- read.dbf('C:/vitalstrategies/data_sicence/TCC/script_linkage/dados/SINAN/VIOLENET.DBF')
View(sinan)
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN") # Criando colunas com ID "SINAN_1 ... "
sinan2<- padroniza_variaveis(sinan,"SINAN")
sinan2<- padroniza_variaveis("SINAN")
sinan2<- sinan |> padroniza_variaveis("SINAN")
rm(sinan2)
sinan2<- sinan |> padroniza_variaveis("SINAN")
return(names(df) <- sinan_names$stanard_name)
padroniza_variaveis <- function(df, nome_base){
# nomes das variáveis originais e padronizadas filtradas para o SINAN
sinan_names <- namestand %>%
dplyr::filter(fonte == nome_base) %>%
dplyr::select(var_names_orig, stanard_name)
df <- df %>%
select(sinan_names$var_names_orig)
return(names(df) <- sinan_names$stanard_name)
}
sinan2<- sinan |> padroniza_variaveis("SINAN")
padroniza_variaveis <- function(df, nome_base) {
# nomes das variáveis originais e padronizadas filtradas para o SINAN
sinan_names <- namestand %>%
filter(fonte == nome_base) %>%
select(var_names_orig, stanard_name)
# Seleciona as variáveis do dataframe original
df <- df %>%
select(sinan_names$var_names_orig)
# Renomeia as colunas do dataframe com os valores de stanard_name
names(df) <- sinan_names$stanard_name
return(df)
}
sinan2<- sinan |> padroniza_variaveis("SINAN")
padroniza_variaveis <- function(df, nome_base) {
# nomes das variáveis originais e padronizadas filtradas para o SINAN
names <- namestand %>%
filter(fonte == nome_base) %>%
select(var_names_orig, stanard_name)
# Seleciona as variáveis do dataframe original
df <- df %>%
select(names$var_names_orig)
# Renomeia as colunas do dataframe com os valores de stanard_name
names(df) <- names$stanard_name
return(df)
}
sinan2<- sinan |> padroniza_variaveis("SINAN")
View(sinan2)
rm(sinan2)
sinan <- read.dbf('C:/vitalstrategies/data_sicence/TCC/script_linkage/dados/SINAN/VIOLENET.DBF')
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::padroniza_variaveis("SINAN")
devtools::load_all(".")
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::padroniza_variaveis("SINAN")
devtools::check()
rm(padroniza_variaveis())
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::padroniza_variaveis("SINAN")
devtools::load_all(".")
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::padroniza_variaveis("SINAN")
library(readstata13)
library(tidyverse)
library(pdftools)
library(data.table)
library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex
library(janitor)
library(lubridate)
library(writexl)
devtools::load_all(".")
sinan <- read.dbf('C:/vitalstrategies/data_sicence/TCC/script_linkage/dados/SINAN/VIOLENET.DBF')
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::padroniza_variaveis("SINAN")
devtools::load_all(".")
devtools::load_all(".")
devtools
devtools::check()
devtools::check()
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::padroniza_variaveis("SINAN")
devtools::check()
library(readstata13)
library(tidyverse)
library(pdftools)
library(data.table)
library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex
library(janitor)
library(lubridate)
library(writexl)
devtools::load_all(".")
namestand<- vitallinkage::namestand
sinan <- read.dbf('C:/vitalstrategies/data_sicence/TCC/script_linkage/dados/SINAN/VIOLENET.DBF')
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::padroniza_variaveis("SINAN")
sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")
namestand<- vitallinkage::namestand
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... "
vitallinkage::padroniza_variaveis(namestand,"SINAN")
View(sinan)
View(sinan)
sinan <- read.dbf('C:/vitalstrategies/data_sicence/TCC/script_linkage/dados/SINAN/VIOLENET.DBF')
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  #Dropa as colunas duplicadas inicialmente
vitallinkage::padroniza_variaveis(namestand,"SINAN") |>
vitallinkage::criar_coluna_id("SINAN") # Criando colunas com ID "SINAN_1 ... "
sinan$id_SINAN
library(devtools)
devtools::install_github('erikluancosta/vitallinkage')
devtools::install_github('https://github.com/erikluancosta/vitallinkage.git')
library(vitallinkage)
install.packages('erikluancosta/vitallinkage')
install.packages('https://github.com/erikluancosta/vitallinkage.git')
library(vitallinkage)
devtools::install_github('https://github.com/erikluancosta/vitallinkage.git')
library(vitallinkage)
remove.packages("vitallinkage")
devtools::install_github('https://github.com/erikluancosta/vitallinkage.git')
options(scipen=999)
#devtools::install_github('renato115/tab_vs_package')
library(ciTools)
library(readxl)
library(tidyverse)
library(stringr)
library(stringi)
library(readstata13)
library(lubridate)
library(foreign)
library(gt)
library(reshape2)
library(janitor)
library(vitaltable)
## Erik
path <- "C:/vitalstrategies/data_sicence/linkage_recife/dados/"
# Oli
# path <- ""
# load(paste0(path,"/base_linkada_anon_all_years_14sep2023_final.Rdata"))
load(paste0(path,"SIM_SINAN_SIH_ESUS_linkado_recife_pre_descritiva_anon_3.Rdata"))
load(paste0(path,"/icd_map_res.Rdata"))
df_linkado_anon_2 <- df_linkado_anon_2 |>
mutate(
# Colunas do SINAN
rede_enc_sau = case_when((rede_sau == "1" | enc_saude == "1") ~ 1, T ~ 0),
assit_soc_creas = case_when((assist_soc == "1" | enc_creas == "1") ~ 1, T ~ 0),
atend_enc_mulh = case_when((atend_mulh == "1" | enc_mulher == "1") ~ 1, T ~ 0),
cons_enc_tutela = case_when((cons_tutel == "1" | enc_tutela == "1") ~ 1, T ~ 0),
mpu_enc_mpu = case_when((mpu == "1" | enc_mpu == "1") ~ 1, T ~ 0),
deleg_enc_cria = case_when((deleg_cria == "1" | enc_dpca == "1") ~ 1, T ~ 0),
deleg_enc_mulh = case_when((deleg_mulh == "1" | enc_deam == "1") ~ 1, T ~ 0),
deleg_enc_deleg = case_when((deleg == "1" | enc_deleg == "1") ~ 1, T ~ 0),
infan_enc_juv = case_when((infan_juv == "1" | enc_vara == "1") ~ 1, T ~ 0),
# faixa etária
faixa_etaria_reduzida = case_when(
idade <= 19 ~ "Até 19 anos",
idade >= 20 & idade <= 59 ~ "20 a 59 anos",
idade >= 60 ~ "60 anos ou mais"
)
)
#####
## CRIANDO FLAG
#####
no_sim <- df_linkado_anon_2 |>
filter(banco == 'SIM') |>
distinct(par_f)
no_sinan <- df_linkado_anon_2 |>
filter(banco == 'SINAN') |>
distinct(par_f)
no_sih <- df_linkado_anon_2 |>
filter(banco == 'SIH') |>
distinct(par_f)
no_esusab <- df_linkado_anon_2 |>
filter(banco == 'ESUS_AB') |>
distinct(par_f)
viol_sexual <- df_linkado_anon_2 |>
filter(viol_sexu == 1) |>
distinct(par_f)
# No SIM
df_linkado_anon_2<- df_linkado_anon_2  |>
mutate(FL_SIM = ifelse(par_f %in% no_sim$par_f, 1, 0))
rm(no_sim)
# No SINAN
df_linkado_anon_2<- df_linkado_anon_2  |>
mutate(FL_SINAN = ifelse(par_f %in% no_sinan$par_f, 1, 0))
rm(no_sinan)
# No SIH
df_linkado_anon_2<- df_linkado_anon_2  |>
mutate(FL_SIH = ifelse(par_f %in% no_sih$par_f, 1, 0))
rm(no_sih)
# No ESUS AB
df_linkado_anon_2<- df_linkado_anon_2  |>
mutate(FL_ESUS_AB = ifelse(par_f %in% no_esusab$par_f, 1, 0))
rm(no_esusab)
# Com violência sexual
df_linkado_anon_2<- df_linkado_anon_2  |>
mutate(FL_VIOL_SEXU = ifelse(par_f %in% viol_sexual$par_f, 1, 0))
# mulheres que sofreram violência
mul_viol <-
df_linkado_anon_2 |>
filter(FL_SINAN == 1)
# Grupo de mulheres vivas
mul_viol_vivas <- mul_viol |> filter(FL_SIM!=1)
# Grupo de mulheres mortas
mul_viol_ob <- mul_viol |> filter(FL_SIM==1)
# Comparar o perfil desse grupo
mul_viol_ob_esus<- df_linkado_anon_2 |>
filter(
FL_SIM == 1,
FL_SINAN == 1,
FL_ESUS_AB == 1
)
a<- mul_viol_vivas |> filter(banco=="SINAN")
vitaltable::tab_cat_sinan(mul_viol,  enc,"tp_uni")
m <- df_linkado_anon_2 |>
tab_1(banco)|>
rename("Número de registros"=n) |>
select(-`%`)
n<- df_linkado_anon_2 |>
distinct(par_f, banco) |>
tab_1(banco) |>
rename("Número de mulheres"=n) |>
select(-`%`)
o <- merge(m,n, by="banco") |>
mutate(banco = if_else(banco == "ESUS_AB", "ESUS Atenção Básica", banco)) |>
rename("Banco de dados" = banco)
num_mulheres <-df_linkado_anon_2 |> distinct(par_f) |> nrow()
o <- o |>
mutate(`Número de mulheres` = if_else(`Banco de dados` == "Total", num_mulheres, `Número de mulheres`))
resultados <- tabela_bonita(o, "Número de registros e mulheres por banco de dados, Recife (2016 a 2022)")
mul_viol_vivas
reg_mul_vivas <- mul_viol_vivas |> nrow()
reg_mul_vivas
mul_viol_vivas |> distinct(par_f) |> nrow()
reg_mul_vivas
m <- df_linkado_anon_2 |>
tab_1(banco)|>
rename("Número de registros"=n) |>
select(-`%`)
n<- df_linkado_anon_2 |>
distinct(par_f, banco) |>
tab_1(banco) |>
rename("Número de mulheres"=n) |>
select(-`%`)
o <- merge(m,n, by="banco")
#num_mulheres <-df_linkado_anon_2 |> distinct(par_f) |> nrow()
o <- o |>
mutate(`Número de mulheres` = if_else(banco == "Total", num_mulheres, `Número de mulheres`))
banco_1 <- df_linkado_anon_2 |>
distinct(par_1, banco) |>
filter(!is.na(par_1))
banco_2 <- df_linkado_anon_2 |>
distinct(par_1, banco) |>
filter(!is.na(par_1))
bancos_comp <- left_join(
banco_1,
banco_2,
by = "par_1"
) |>
distinct() |>
tab_2(
banco.x,
banco.y
) |>
rename("banco" = banco.x) |>
select(-Total) #|>
#filter(banco != 'Total')
# Substituir os valores onde o nome da linha é igual ao nome da coluna por NA
for (i in 1:nrow(bancos_comp)) {
for (j in 2:ncol(bancos_comp)) {
if (bancos_comp$banco[i] == colnames(bancos_comp)[j]) {
bancos_comp[i, j] <- NA
}
}
}
o <- o |>
mutate(`Número de mulheres` = if_else(banco == "Total", num_mulheres, `Número de mulheres`))
d <-merge(o, bancos_comp, by= "banco")
d <- d |>
mutate(
banco = if_else(banco == "ESUS_AB", "ESUS Atenção Básica", banco
)
) |>
rename(
"Banco de dados" = banco,
"ESUS Atenção Básica" = ESUS_AB,
)
tabela_comparativo <- tabela_bonita(d, "Número de registros totais e mulheres por base de dados pareadas, Recife (2016 a 2022)")
rm(df_linkado_anon_2)
mul_viol_vivas |> tab_1(banco)
mul_viol_ob |> tab_1(banco)
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
left_join(
raca_linkage_vivas,
raca_linkage_ob,
by = "ds_raca"
) |>
rename("Raça/cor" = ds_raca)
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
left_join(
raca_linkage_vivas,
raca_linkage_ob,
by = "ds_raca"
) |>
rename("Banco de dados" = banco)
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
left_join(
banco_linkage_vivas,
banco_linkage_ob,
by = "ds_raca"
) |>
rename("Banco de dados" = banco)
reg_mul_vivas <- mul_viol_vivas |> nrow()
mul_vivas <- mul_viol_vivas |> distinct(par_f) |> nrow()
mul_ob <- mul_viol_ob |> nrow()
banco_linkage_vivas <- mul_viol_vivas |>
tab_1(banco) |>
rename(
"Mulheres que sofreram violência e estão vivas (n)" = n,
"Mulheres que sofreram violência e estão vivas (%)" = `%`
)
banco_linkage_ob <- mul_viol_ob |>
tab_1(banco) |>
rename(
"Mulheres que sofreram violência e vieram a óbito (n)" = n,
"Mulheres que sofreram violência e vieram a óbito (%)" = `%`
)
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
left_join(
banco_linkage_vivas,
banco_linkage_ob,
by = "ds_raca"
) |>
rename("Banco de dados" = banco)
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
left_join(
banco_linkage_vivas,
banco_linkage_ob,
by = "banco"
) |>
rename("Banco de dados" = banco)
View(comp_banco)
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
right_join(
banco_linkage_vivas,
banco_linkage_ob,
by = "banco"
) |>
rename("Banco de dados" = banco)
# Printando mulheres que sofreram violencia sexual
comp_banco<-
tabela_bonita(
comp_banco,
"Comparação do Número de Registros de Violência contra Mulheres no SINAN, Vivas vs. Óbitos, Recife (2016 a 2022)"
)
comp_banco
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
right_join(
banco_linkage_vivas,
banco_linkage_ob,
by = "banco"
) |>
rename("Banco de dados" = banco) |>
arrange(-`Mulheres que sofreram violência e vieram a óbito (n)`)
View(comp_banco)
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
right_join(
banco_linkage_vivas,
banco_linkage_ob,
by = "banco"
) |>
rename("Banco de dados" = banco) |>
arrange(`Banco de dados` %in% "Total", -`Mulheres que sofreram violência e vieram a óbito (n)`)
comp_banco
# juntando as tabelas de fx etaria de quem sofreu violencia sexual
comp_banco <-
right_join(
banco_linkage_vivas,
banco_linkage_ob,
by = "banco"
) |>
rename("Banco de dados" = banco) |>
mutate_all(~replace(., is.na(.), 0)) |>
arrange(`Banco de dados` %in% "Total", -`Mulheres que sofreram violência e vieram a óbito (n)`)
comp_banco
devtools:check.options()
library(devtools)
devtools::check()
namestand
library(readstata13)
library(tidyverse)
library(pdftools)
library(data.table)
library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex em portugues
library(janitor)
library(lubridate)
library(writexl)
devtools::load_all(".")
# leitura da base especifica para cada caso
sinan <- read.dbf('C:/vitalstrategies/data_sicence/TCC/script_linkage/dados/SINAN/VIOLENET.DBF')
namestand
diamond
mtcars
mtcars
namestand
vitallinkage::namestand
#
sinan <- sinan |>
vitallinkage::drop_duplicados_sinan_1() |>  # Dropa as colunas duplicadas inicialmente
vitallinkage::padroniza_variaveis(namestand,"SINAN") |> # Padroniza variáveis baseado no df nomestand
vitallinkage::criar_coluna_id("SINAN")|> # Criando colunas com ID "SINAN_1 ... " e adiciona coluna com nome do banco
vitallinkage::ds_raca_sinan() |> # Cria coluna descrevendo as raça no sinan
vitallinkage::corrige_sg_sexo() |> # Corrige os registros de sexo Ignorado
vitallinkage::nu_idade_anos_sinan() # Adiciona a coluna com a idade calculada
namestand
View(sinan)
sinan
devtools::check()
devtools::check()
