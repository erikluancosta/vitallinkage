vitallinkage::soundex_nomepai_sim() # novas colunas: NOMEPAI1_SOUND, NOMEPAI2_SOUND, NOMEPAI3_SOUND
sim_2 %>%
group_by(NUMERODO) %>%
summarise(n = n()) %>%
filter(n > 1)
t <- sim_2 %>%
group_by(NUMERODO) %>%
summarise(n = n()) %>%
filter(n > 1)
linhas_duplicadas<- sim_2[duplicated(sim_2$NUMERODO) | duplicated(sim_2$NUMERODO, fromLast = TRUE), ]
t <- sim_2 %>%
group_by(NUMERODO) %>%
summarise(n = n()) %>%
filter(n > 1)
sim_to_del <- merge(sim, t, by = "NUMERODO")
View(sim_to_del)
t <- sim_2 %>%
group_by(NUMERODO) %>%
summarise(n = n()) %>%
filter(n > 1)
sim_to_del <- merge(sim_2, t, by = "NUMERODO")
names(sim_2)
check()
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::check()
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
sim_2$NUMERODO
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
regra_c3 <- a |>
dplyr::group_by(
NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d
) |>
dplyr::summarise(n=n()) |>
dplyr::filter(n>1,is.na(DTNASC)==F) |>
dplyr::mutate(id=paste0(
NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d
)) |>
dplyr::ungroup()
rm(sim_do_tel)
rm(sim_to_tel)
rm(sim_to_del)
rm(linhas_duplicadas)
rm(t)
regra_c3 <- a |>
dplyr::group_by(
NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d
) |>
dplyr::summarise(n=n()) |>
dplyr::filter(n>1,is.na(DTNASC)==F) |>
dplyr::mutate(id=paste0(
NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d
)) |>
dplyr::ungroup()
a <- a |>
dplyr::mutate(id=paste0( NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d))
t_id <- as.vector(regra_c3$id)
regra_c3 <- regra_c3 |>
dplyr::select(id,n)
a_to_del_c3 <- merge(a, regra_c3, by = "id")
nm_a <- names(a)
#tirando NUMERODO do vetor de nomes
nm_a <- lubridate::setdiff(nm_a, c("id"))
#Preenchendo as linhas em que uma DO é missing por outra que não é missing, todos os campos.
a_to_del_c3 <- a_to_del_c3 |>
dplyr::group_by(id) |>
tidyr::fill(nm_a, .direction = "downup") |>
dplyr::ungroup()
#selecionando uma DO aleatória
a_to_del_c3 <- a_to_del_c3 |>
dplyr::group_by(id) |>
dplyr::slice_sample(n = 1)
t2 <- as.vector(regra_c3$id)
#Adicionando as DOs aleatórias repetidas
a <- a |>
dplyr::filter(!id%in%t2) |>
rbind(dplyr::select(a_to_del_c3,-n))
a <- a |>
dplyr::select(-id,-causa_3d)
names(a)
a <- a |>
dplyr::mutate(id=rownames(a))
)
a <- a |>
dplyr::mutate(id=rownames(a)) |>
dplyr::group_by(NUMERODO) |>
dplyr::summarise(n = n()) |>
dplyr::filter(n > 1)
a_to_del <- merge(a, t, by = "NUMERODO")
a_to_del <- merge(a, t, by = "NUMERODO")
a
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::drop_duplicados_sim()
regra_c3 <- a |>
dplyr::group_by(
NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d
) |>
dplyr::summarise(n=n()) |>
dplyr::filter(n>1,is.na(DTNASC)==F) |>
dplyr::mutate(id=paste0(
NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d
)) |>
dplyr::ungroup()
a <- a |>
dplyr::mutate(id=paste0( NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d))
t_id <- as.vector(regra_c3$id)
regra_c3 <- regra_c3 |>
dplyr::select(id,n)
a_to_del_c3 <- merge(a, regra_c3, by = "id")
nm_a <- names(a)
#tirando NUMERODO do vetor de nomes
nm_a <- lubridate::setdiff(nm_a, c("id"))
#Preenchendo as linhas em que uma DO é missing por outra que não é missing, todos os campos.
a_to_del_c3 <- a_to_del_c3 |>
dplyr::group_by(id) |>
tidyr::fill(nm_a, .direction = "downup") |>
dplyr::ungroup()
#selecionando uma DO aleatória
a_to_del_c3 <- a_to_del_c3 |>
dplyr::group_by(id) |>
dplyr::slice_sample(n = 1)
t2 <- as.vector(regra_c3$id)
#Adicionando as DOs aleatórias repetidas
a <- a |>
dplyr::filter(!id%in%t2) |>
rbind(dplyr::select(a_to_del_c3,-n))
a <- a |>
dplyr::select(-id,-causa_3d)
names(a)
a <- a |>
dplyr::mutate(id=rownames(a)) |>
dplyr::group_by(NUMERODO) |>
dplyr::summarise(n = n()) |>
dplyr::filter(n > 1)
a_to_del <- merge(a, t, by = "NUMERODO")
#tirando NUMERODO do vetor de nomes
nm_a <- lubridate::setdiff(nm_a, c("NUMERODO"))
#Preenchendo as linhas em que uma DO é missing por outra que não é missing, todos os campos.
a_to_del <- a_to_del |>
dplyr::group_by(NUMERODO) |>
tidyr::fill(nm_a, .direction = "downup") |>
dplyr::ungroup()
#Adicionando as DOs aleatórias repetidas
a <- a |>
dplyr::filter(!id%in%t2) |>
rbind(dplyr::select(a_to_del_c3,-n))
d <- sim_2 |>
vitallinkage::drop_duplicados_sim()
a <- d
regra_c3 <- a |>
dplyr::group_by(
NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d
) |>
dplyr::summarise(n=n()) |>
dplyr::filter(n>1,is.na(DTNASC)==F) |>
dplyr::mutate(id=paste0(
NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d
)) |>
dplyr::ungroup()
View(regra_c3)
a <- a |>
dplyr::mutate(id=paste0( NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d))
t_id <- as.vector(regra_c3$id)
regra_c3 <- regra_c3 |>
dplyr::select(id,n)
a_to_del_c3 <- merge(a, regra_c3, by = "id")
nm_a <- names(a)
#tirando NUMERODO do vetor de nomes
nm_a <- lubridate::setdiff(nm_a, c("id"))
#Preenchendo as linhas em que uma DO é missing por outra que não é missing, todos os campos.
a_to_del_c3 <- a_to_del_c3 |>
dplyr::group_by(id) |>
tidyr::fill(nm_a, .direction = "downup") |>
dplyr::ungroup()
#selecionando uma DO aleatória
a_to_del_c3 <- a_to_del_c3 |>
dplyr::group_by(id) |>
dplyr::slice_sample(n = 1)
t2 <- as.vector(regra_c3$id)
#Adicionando as DOs aleatórias repetidas
a <- a |>
dplyr::filter(!id%in%t2) |>
rbind(dplyr::select(a_to_del_c3,-n))
a <- a |>
dplyr::select(-id,-causa_3d)
names(a)
a <- a |>
dplyr::mutate(id=rownames(a)) |>
dplyr::group_by(NUMERODO) |>
dplyr::summarise(n = n()) |>
dplyr::filter(n > 1)
a
regra_c3 <- a %>%
group_by(    NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d) %>%
summarise(n=n()) %>%
filter(n>1,is.na(DTNASC)==F) %>%
mutate(id=paste0( NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d)) %>%
ungroup()
a <- d
regra_c3 <- a %>%
group_by(    NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d) %>%
summarise(n=n()) %>%
filter(n>1,is.na(DTNASC)==F) %>%
mutate(id=paste0( NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d)) %>%
ungroup()
a <- a %>%
mutate(id=paste0( NOMEPAI_SOUND,
DTNASC,
DTOBITO,
causa_3d))
t_id <- as.vector(regra_c3$id)
regra_c3 <- regra_c3 %>%
dplyr::select(id,n)
a_to_del_c3 <- merge(a, regra_c3, by = "id")
nm_a <- names(a)
#tirando NUMERODO do vetor de nomes
nm_a <- setdiff(nm_a, c("id"))
#Preenchendo as linhas em que uma DO é missing por outra que não é missing, todos os campos.
a_to_del_c3 <- a_to_del_c3 %>%
dplyr::group_by(id) %>%
fill(nm_a, .direction = "downup") %>%
dplyr::ungroup()
#selecionando uma DO aleatória
a_to_del_c3 <- a_to_del_c3 %>%
group_by(id) %>%
slice_sample(n = 1)
t2 <- as.vector(regra_c3$id)
#Adicionando as DOs aleatórias repetidas
a <- a %>%
filter(!id%in%t2) %>%
rbind(select(a_to_del_c3,-n))
a <- a %>%
select(-id,-causa_3d)
names(a)
a <- a %>%
mutate(id=rownames(a))
d <- sim_2 |>
vitallinkage::drop_duplicados_sim()
devtools::load_all(".")
devtools::check()
d <- sim_2 |>
vitallinkage::drop_duplicados_sim()
devtools::cj
devtools::check
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::check()
devtools::load_all(".")
sim_2 <- sim |>
vitallinkage::as_char() |> # Transformando todos em character
vitallinkage::variaveis_principais_sim() |> # Seleção das principais variáveis do SIM
#base::unique() |> # Valores únicos com a base bruta
vitallinkage::limpa_ignorados_sim() |> # Remove textos de ignorado
vitallinkage::ajusta_encoding_sim() |> # Ajusta o encoding para UTF-8 ASCII
vitallinkage::tratamentos_txt_sim() |> # Ajustes nos textos das variaveis char
base::unique() |>  # Novos valores únicos após o tratamento
vitallinkage::soundex_nome_sim() |>  # novas colunas: NOME1_SOUND, NOME2_SOUND, NOME3_SOUND
vitallinkage::soundex_nomemae_sim() |> # novas colunas: NOMEMAE1_SOUND, NOMEMAE2_SOUND, NOMEMAE3_SOUND
vitallinkage::soundex_nomepai_sim() |>  # novas colunas: NOMEPAI1_SOUND, NOMEPAI2_SOUND, NOMEPAI3_SOUND
vitallinkage::drop_duplicados_sim() # Aplicando métodos para dropar duplicados
library(readstata13)
library(tidyverse)
library(pdftools)
library(data.table)
library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex
library(janitor)
library(lubridate)
library(writexl)
devtools::load_all(".")
# Specify the file path
path <- 'C:/vitalstrategies/data_sicence/TCC/SCRIPTS_LINKAGE/Erik/SIM'
# lista de arquivos com fim .DBF
dbf_files <- list.files(path, pattern = "\\.DBF$", full.names = TRUE)
# Data Frame para adicionar os dados carregados
sim_raw <- data.frame()
# Loop para carregar e concatenar os dbf
for (file in dbf_files) {
# Lendo arquivo DBF
sim_temp <- read.dbf(file) |>
mutate(ANO=substr(DTOBITO,5,8))
sim_raw <- bind_rows(sim_raw,sim_temp)
rm(sim_temp)
}
sim<-sim_raw
sim_2 <- sim |>
vitallinkage::as_char() |> # Transformando todos em character
vitallinkage::variaveis_principais_sim() |> # Seleção das principais variáveis do SIM
#base::unique() |> # Valores únicos com a base bruta
vitallinkage::limpa_ignorados_sim() |> # Remove textos de ignorado
vitallinkage::ajusta_encoding_sim() |> # Ajusta o encoding para UTF-8 ASCII
vitallinkage::tratamentos_txt_sim() |> # Ajustes nos textos das variaveis char
base::unique() |>  # Novos valores únicos após o tratamento
vitallinkage::soundex_nome_sim() |>  # novas colunas: NOME1_SOUND, NOME2_SOUND, NOME3_SOUND
vitallinkage::soundex_nomemae_sim() |> # novas colunas: NOMEMAE1_SOUND, NOMEMAE2_SOUND, NOMEMAE3_SOUND
vitallinkage::soundex_nomepai_sim() |>  # novas colunas: NOMEPAI1_SOUND, NOMEPAI2_SOUND, NOMEPAI3_SOUND
vitallinkage::drop_duplicados_sim() # Aplicando métodos para dropar duplicados
sim_2 <- sim |>
vitallinkage::as_char() |> # Transformando todos em character
vitallinkage::variaveis_principais_sim() |> # Seleção das principais variáveis do SIM
vitallinkage::limpa_ignorados_sim() |> # Remove textos de ignorado
vitallinkage::ajusta_encoding_sim() |> # Ajusta o encoding para UTF-8 ASCII
vitallinkage::tratamentos_txt_sim() |> # Ajustes nos textos das variaveis char
base::unique() |>  # Novos valores únicos após o tratamento
vitallinkage::soundex_nome_sim() |>  # novas colunas: NOME1_SOUND, NOME2_SOUND, NOME3_SOUND
vitallinkage::soundex_nomemae_sim() |> # novas colunas: NOMEMAE1_SOUND, NOMEMAE2_SOUND, NOMEMAE3_SOUND
vitallinkage::soundex_nomepai_sim() |>  # novas colunas: NOMEPAI1_SOUND, NOMEPAI2_SOUND, NOMEPAI3_SOUND
vitallinkage::drop_duplicados_sim() |> # Aplicando métodos para dropar duplicados
vitallinkage::variaveis_principais_sim() |> # Seleção das principais variáveis do SIM
vitallinkage::padroniza_variaveis(namestand, "SIM")
sim_2$id_SIM
devtools::check()
devtools::load_all(".")
sim_2 |> vitallinkage::ds_raca_sim()
devtools::load_all(".")
devtools::check()
devtools::load_all(".")
sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::nu_idade_anos_sim()
a <- sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::nu_idade_anos_sim()
a <- sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::corrige_sg_sexo() |>
vitallinkage::nu_idade_anos_sim()
a$ds_raca
a$cd_raca
sim_2$ds_raca
a$sg_sexo
sim_2$sg_sexo
a$sg_sexo
sim_2$id_SIM
a$id_SIM
a <- sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::corrige_sg_sexo() |>
vitallinkage::nu_idade_anos_sim() |>
vitallinkage::sim_anon()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::corrige_sg_sexo() |>
vitallinkage::nu_idade_anos_sim() |>
vitallinkage::sim_anon()
devtook
devtools::check()
devtools::check()
devtools::check()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::corrige_sg_sexo() |>
vitallinkage::nu_idade_anos_sim() |>
vitallinkage::sim_anon()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::corrige_sg_sexo() |>
vitallinkage::nu_idade_anos_sim() |>
vitallinkage::sim_anon()
devtools::check()
a <- sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::corrige_sg_sexo() |>
vitallinkage::nu_idade_anos_sim() |>
vitallinkage::sim_anon()
devtools::load_all(".")
a <- sim_2 |>
vitallinkage::ds_raca_sim() |>
vitallinkage::corrige_sg_sexo() |>
vitallinkage::nu_idade_anos_sim() |>
vitallinkage::sim_anon()
View(a)
library(readstata13)
library(tidyverse)
library(pdftools)
library(data.table)
library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex
library(janitor)
library(lubridate)
library(writexl)
devtools::load_all(".")
library(readstata13)
library(tidyverse)
library(pdftools)
library(data.table)
library(dplyr)
library(readxl)
library(foreign)
library(stringi)
library(SoundexBR) #soundex
library(janitor)
library(lubridate)
library(writexl)
devtools::load_all(".")
# Specify the file path
path <- 'C:/vitalstrategies/data_sicence/TCC/SCRIPTS_LINKAGE/Erik/SIM'
# lista de arquivos com fim .DBF
dbf_files <- list.files(path, pattern = "\\.DBF$", full.names = TRUE)
# Data Frame para adicionar os dados carregados
sim_raw <- data.frame()
# Loop para carregar e concatenar os dbf
for (file in dbf_files) {
# Lendo arquivo DBF
sim_temp <- read.dbf(file) |>
mutate(ANO=substr(DTOBITO,5,8))
sim_raw <- bind_rows(sim_raw,sim_temp)
rm(sim_temp)
}
sim<-sim_raw
sim_2 <- sim |>
vitallinkage::as_char() |> # Transformando todos em character
vitallinkage::variaveis_principais_sim() |> # Seleção das principais variáveis do SIM
vitallinkage::limpa_ignorados_sim() |> # Remove textos de ignorado
vitallinkage::ajusta_encoding_sim() |> # Ajusta o encoding para UTF-8 ASCII
vitallinkage::tratamentos_txt_sim() |> # Ajustes nos textos das variaveis char
base::unique() |>  # Novos valores únicos após o tratamento
vitallinkage::soundex_nome_sim() |>  # novas colunas: NOME1_SOUND, NOME2_SOUND, NOME3_SOUND
vitallinkage::soundex_nomemae_sim() |> # novas colunas: NOMEMAE1_SOUND, NOMEMAE2_SOUND, NOMEMAE3_SOUND
vitallinkage::soundex_nomepai_sim() |>  # novas colunas: NOMEPAI1_SOUND, NOMEPAI2_SOUND, NOMEPAI3_SOUND
vitallinkage::drop_duplicados_sim() |> # Aplicando métodos para dropar duplicados
vitallinkage::variaveis_principais_sim() |> # Seleção das principais variáveis do SIM
vitallinkage::padroniza_variaveis(namestand, "SIM") |> # Padronizando os nomes das variáveis
vitallinkage::ds_raca_sim() |> # Ajustando a raça/cor
vitallinkage::corrige_sg_sexo() |> # Ajustando a variável sg_sexo
vitallinkage::nu_idade_anos_sim() # Ajustanso a idade em anos
# Anonimização
sim_anon <- sim_2  |>
vitallinkage::sim_anon()
